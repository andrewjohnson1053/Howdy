# -*- coding: utf-8 -*-
"""ML_Practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jmzd1zd_GonWvSUY1m1H2iKGtYh6Xblx

ML - Linear Regression
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

dataset = pd.read_csv("/content/sample_data/hours.csv")
X = dataset.iloc[:,:-1]
y = dataset.iloc[:,1]

model = LinearRegression()
model.fit(X,y)
print("Accuracy of the model is : ", model.score(X,y))

hrs = int(input("Input the number of hours : "))
print("Risk is : ", (model.coef_[0] * hrs + model.intercept_))

print("Equation of the line is : y = ", model.coef_[0], "x + ", model.intercept_)

plt.plot(X,y,'o')
plt.plot(X,model.predict(X))
plt.show()

"""K-means Clustering"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

X = [[0.1,0.6] ,[0.15,0.71] ,[0.08,0.9] ,[0.16,0.85] ,[0.2,0.3] ,[0.25,0.5] ,[0.24,0.1],[0.3,0.2]]
centers = np.array([X[0],X[7]])

model = KMeans(n_clusters=2,init=centers,n_init=1)
model.fit(X)

print("P6 belongs to : ", model.labels_[5])
print("Population around cluster M2 : ", np.count_nonzero(model.labels_ == 1))
print("New Clusters : ", model.cluster_centers_)

"""K-Nearest Neighbours"""

import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier

dataset = pd.read_csv("/content/sample_data/kdata.csv")
X = dataset.iloc[:,:-1]
y = dataset.iloc[:,2]

model = KNeighborsClassifier(n_neighbors=3)
model.fit(X,y)

model.predict([[6,6]])

model_dw = KNeighborsClassifier(n_neighbors=3,weights='distance')
model_dw.fit(X,y)

model_dw.predict([[6,6]])

"""Decision Tree"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder

dataset = pd.read_csv("/content/sample_data/tree1.csv")
X = dataset.iloc[:,:-1]
y = dataset.iloc[:,5].values
X = X.iloc[:,1:]

lb = LabelEncoder()
X = X.apply(LabelEncoder().fit_transform)

model = DecisionTreeClassifier()
model.fit(X,y)

pred = np.array([1,1,0,0])
model.predict([pred])

from six import StringIO
from IPython.display import Image
from sklearn.tree import export_graphviz
import pydotplus

dot_plus = StringIO()
export_graphviz(model,out_file=dot_plus,filled=True,rounded=True,special_characters=True)
graph = pydotplus.graph_from_dot_data(dot_plus.getvalue())
graph.write_png('tree.png')


"""Diffie-Hellman"""

#private constants
a=3
b=7
#public constants
g=17
n=93

x=int(pow(g, a, n))
y=int(pow(g, b, n))
print("X: ", x, "Y: ", y)

#after exchange is done

ssx=int(pow(y, a, n))
ssy=int(pow(x, b, n))

print("generated shared secret :", "ssx: ", ssx, "ssy: ", ssy)

"""RSA"""
#take (17, 23) for p and q always

def gcd(a,b):
    if b==0:
        return a
    else:
        return gcd(b, a%b)


p = int(input("enter value of p: "))
q = int(input("enter value of q: "))
pt= input("enter plain text: ")

n=p*q
t= (p-1)(q-1)

for e in range(2, t):
    if gcd(e, t)==1:
        break

for d in range(1, t):
    if e*d%t==1:
        break

l=[]
s1=" "

for i in pt:
    ctt=pow(ord(i), e)
    ct = ctt%n
    l.append(ct)

for j in range(len(l)):
    dtt=pow(l[i],d)
    dt=dtt%n
    s1 += chr(dt)

print("plain text: ", pt)
print("cipher text: ", l)
print("original text: ", s1)

